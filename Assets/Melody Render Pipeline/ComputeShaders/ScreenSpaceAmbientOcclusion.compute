#include "../ShaderLibrary/Common.hlsl"
#pragma kernel SSAOResolve

RWTexture2D<float3> AmbientOcclusionRT;
Texture2D<float3> _RandomVectors;
float4x4 _CameraProjection;
float4x4 _CameraInverseProjection;

int sampleCount;
float radius;
float bias;
float magnitude;
float contrast;

[numthreads(8,8,1)]
void SSAOResolve(uint3 id : SV_DispatchThreadID) {
    //[0,_CameraBufferSize-1] -> screen [0,1] uv
    float2 screenUV = id.xy / _CameraBufferSize.zw;
    //calculate camera to far plane ray in the screen
    float4 cameraRay = float4(screenUV * 2.0 - 1.0, 1.0, 1.0);
    cameraRay = mul(_CameraInverseProjection, cameraRay);
    cameraRay.xyz = cameraRay.xyz / cameraRay.w;
    float rawDepth = _CameraDepthTexture.SampleLevel(sampler_point_clamp, screenUV, 0);
    float linear01Depth = Linear01Depth(rawDepth, _ZBufferParams);
    //far camera ray multi 01Depth get view space position
    float3 positionVS = cameraRay.xyz * linear01Depth;
    float occlusion = 0.0;
    for (int i = 0; i < sampleCount; i++) {
        float3 samplePosition = _RandomVectors.SampleLevel(sampler_linear_clamp, float2((i / sampleCount), 0.5), 0.0).xyz;

    }
    occlusion /= sampleCount;
    AmbientOcclusionRT[id.xy] = positionVS;
}