#include "../ShaderLibrary/Common.hlsl"
#pragma kernel SSAOResolve

RWTexture2D<float3> AmbientOcclusionRT;

int sampleCount;
float radius;
float bias;
float magnitude;
float contrast;

float3 ConvertScreenIDToPosWS(uint2 id) {
	//input id is compute function's input SV_DispatchThreadID
	 //[0,RTSize-1] -> screen [0,1] uv
	float2 screenUV = float2(id.xy / _CameraBufferSize.zw);
	//get rawDepth(posCS.z) in _CameraDepthTexture
	float inputPixelRawDepth = _CameraDepthTexture.SampleLevel(sampler_point_clamp, screenUV, 0);
	//reconstruct ndc using screen [0,1] uv & rawDepth
	float4 ndc = float4(screenUV * 2.0 - 1.0, inputPixelRawDepth, 1.0);
	float4 posHWS = mul(_InvViewProjMatrix, ndc); //ndc -> posHWS
	float3 posWS = posHWS.xyz / posHWS.w; //posHWS -> posWS
	return posWS;
}

[numthreads(8,8,1)]
void SSAOResolve(uint3 id : SV_DispatchThreadID) {
	float2 screenUV = float2(id.xy / _CameraBufferSize.zw);
//------------------------sample common buffers------------------------//
	float4 depthNormalTexture = SAMPLE_TEXTURE2D_LOD(_CameraDepthNormalTexture, sampler_point_clamp, screenUV, 0);
	//depth of the DepthNormal is not realiabe, maybe sample Depth Texture instead
	float4 depthTexture = SAMPLE_DEPTH_TEXTURE_LOD(_CameraDepthTexture, sampler_point_clamp, screenUV, 0);
//------------------------calulate buffer informations(view space)------------------------//
	float3 bufferNormal = DecodeViewNormalStereo(depthNormalTexture);
	//float bufferDepth = DecodeFloatRG(depthNormalTexture.zw);
	float bufferDepth = depthTexture.r;
	float3 bufferPosition = ConvertScreenIDToPosWS(id.xy);

    AmbientOcclusionRT[id.xy] = bufferPosition;
}
