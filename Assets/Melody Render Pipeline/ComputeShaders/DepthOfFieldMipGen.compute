#include "../Shaders/DepthOfFieldCommon.hlsl"

//mip generation
//we only do this for the far layer because the near layer can't really use very wide radii due to reconstruction artifacts
#pragma kernel DOFFarLayerMipColor MAIN=DOFFarLayerMipColor
#pragma kernel DOFFarLayerMipCoC MAIN=DOFFarLayerMipCoC
#pragma kernel DOFMipColorMip0 MAIN=DOFMipColorMip0 COPY_MIP0
#pragma kernel DOFMipCoCMip0 MAIN=DOFMipCoCMip0 COPY_MIP0

RWTexture2D<float3> _InputTexture;
#if defined(COPY_MIP0)
RWTexture2D<float3> _OutputTexture;
#endif
RWTexture2D<float3> _OutputMip1;
RWTexture2D<float3> _OutputMip2;
RWTexture2D<float3> _OutputMip3;
RWTexture2D<float3> _OutputMip4;

groupshared float3 gs_cache[8 * 8];

void StorePixel(uint index, float3 color) {
	gs_cache[index] = color;
}

float3 LoadPixel(uint index) {
	return gs_cache[index];
}

//generate four mips in one pass
[numthreads(8, 8, 1)]
void MAIN(uint3 dispatchThreadId : SV_DispatchThreadId, uint groupIndex : SV_GroupIndex) {
	//"<<" is a cheap method the same as divide 2^n
	uint2 ul = dispatchThreadId.xy << 1u;
	//first mip
	float3 color = _InputTexture[ul];
#ifdef COPY_MIP0
	_OutputTexture[ul] = _InputTexture[ul];
	_OutputTexture[ul + uint2(1u, 0u)] = _InputTexture[ul + uint2(1u, 0u)];
	_OutputTexture[ul + uint2(0u, 1u)] = _InputTexture[ul + uint2(0u, 1u)];
	_OutputTexture[ul + uint2(1u, 1u)] = _InputTexture[ul + uint2(1u, 1u)];
#endif
	color += _InputTexture[ul + uint2(1u, 0u)];
	color += _InputTexture[ul + uint2(0u, 1u)];
	color += _InputTexture[ul + uint2(1u, 1u)];
	color *= 0.25;
	StorePixel(groupIndex, color);
	_OutputMip1[dispatchThreadId.xy] = color;
	GroupMemoryBarrierWithGroupSync();

	//second mip - checks that X and Y are even
	if ((groupIndex & 0x9) == 0) {
		color += LoadPixel(groupIndex + 1u);
		color += LoadPixel(groupIndex + 8u);
		color += LoadPixel(groupIndex + 9u);
		color *= 0.25;
		StorePixel(groupIndex, color);

		_OutputMip2[dispatchThreadId.xy / 2u] = color;
	}
	GroupMemoryBarrierWithGroupSync();

	//third mip - checks that X and Y are multiples of four
	if ((groupIndex & 0x1b) == 0) {
		color += LoadPixel(groupIndex + 2u);
		color += LoadPixel(groupIndex + 16u);
		color += LoadPixel(groupIndex + 18u);
		color *= 0.25;
		StorePixel(groupIndex, color);

		_OutputMip3[dispatchThreadId.xy / 4u] = color;
	}
	GroupMemoryBarrierWithGroupSync();

	//last mip - only one thread
	if (groupIndex == 0) {
		color += LoadPixel(groupIndex + 4u);
		color += LoadPixel(groupIndex + 32u);
		color += LoadPixel(groupIndex + 36u);
		color *= 0.25;

		_OutputMip4[dispatchThreadId.xy / 8u] = color;
	}
}
