#include "../Shaders/DepthOfFieldCommon.hlsl"
#include "../Shaders/DepthOfFieldUtils.hlsl"
#pragma multi_compile _ ENABLE_ALPHA
#pragma multi_compile _ DEBUG_TILE
#pragma kernel CircleOfConfusionPhysical
#pragma kernel CircleOfConfusionManual
//const
float _FarStart;
float _NearEnd;
float _FarRange;
float _NearRange;
float _FarMaxRadius;
float _NearMaxRadius;
float _CoCBias;
float _CoCScale;
RWTexture2D<float> _FullResCoCTexture;

[numthreads(8, 8, 1)]
void CircleOfConfusionPhysical(uint3 dispatchThreadId : SV_DispatchThreadID) {
    float depth = LOAD_TEXTURE2D_LOD(_TransparentDepthTexture, dispatchThreadId.xy, 0).r;
    //NOTE : the linearization of the depth is encoded directly in the MAD parameters
    float CoC = _CoCBias - _CoCScale * depth;
    if (CoC > 0) {
        const float maxFarCoC = _FarMaxRadius;
        //CoC clamping for the far field
        CoC = min(CoC, maxFarCoC);
    } else {
        const float maxNearCoC = _NearMaxRadius;
        //CoC clamping for the near field
        CoC = max(CoC, -maxNearCoC);
    }
    _FullResCoCTexture[dispatchThreadId.xy] = CoC;
}

[numthreads(8, 8, 1)]
void CircleOfConfusionManual(uint3 dispatchThreadId : SV_DispatchThreadID) {
    float depth = LOAD_TEXTURE2D_LOD(_TransparentDepthTexture, dispatchThreadId.xy, 0).r;
    //NOTE : we can avoid explicit linearization by merging it with the other computations
    float linearEyeDepth = LinearEyeDepth(depth, _ZBufferParams);
    float CoC = 0;
    if (linearEyeDepth > _FarStart) {
        CoC = _FarMaxRadius * saturate((linearEyeDepth - _FarStart) * _FarRange);
    }
    else if (linearEyeDepth < _NearEnd) {
        CoC = -_NearMaxRadius * saturate((linearEyeDepth - _NearEnd) * _NearRange);
    }
    _FullResCoCTexture[dispatchThreadId.xy] = CoC;
}

#pragma kernel CircleOfConfusionMinMax
#pragma kernel CircleOfConfusionDilate
//min-max tile size
TEXTURE2D(_RawCoCTexture);
RWTexture2D<float4> _MinMaxCoCTexture;
RWTexture2D<float4> _DilateCoCTexture;

float4 InitMinMaxTile() {
    //x: min far coc
    //y: max far coc
    //z: min near coc
    //w: max near coc
    const float bigNumber = 1000;
    //should be small enough to fit in fp16
    return float4(bigNumber, 0, -bigNumber, 0);
}

void UpdateMinMaxTile(inout float4 tile, float CoC) {
    //TODO: Min intersectable CoC --> smallest CoC the kernel may intersect with
    //OutBgdMinCoc = min(OutBgdMinCoc, NeighborBgdMinCoc);
    //OutBgdMinIntersectableCoc = min(OutBgdMinIntersectableCoc, NeighborBgdMinIntersectableCoc + ClosestNeighborDistance);
    if (CoC >= 0) {
        tile.x = min(tile.x, CoC);
        tile.y = max(tile.y, CoC);
    } else {
        tile.z = max(tile.z, CoC);
        tile.w = min(tile.w, CoC);
    }
}

[numthreads(8, 8, 1)]
void CircleOfConfusionMinMax(uint3 dispatchThreadId : SV_DispatchThreadID) {
    float4 minMaxTile = InitMinMaxTile();
    for (uint j = 0; j < TILE_RES; j++) {
        for (uint i = 0; i < TILE_RES; i++) {
            uint2 tiledCoords = dispatchThreadId.xy * TILE_RES + uint2(i, j);
            tiledCoords = min(tiledCoords, _CameraBufferSize.zw - uint2(1, 1));
            float CoC = _RawCoCTexture[tiledCoords].x;
            UpdateMinMaxTile(minMaxTile, CoC);
        }
    }
    _MinMaxCoCTexture[dispatchThreadId.xy] = minMaxTile;
}

void DilateTile(inout float4 tileInfo, float4 tile) {
    //far field
    tileInfo.x = tileInfo.x;
    tileInfo.y = max(tileInfo.y, tile.y);
    //near field
    tileInfo.z = tileInfo.z;
    tileInfo.w = min(tileInfo.w, tile.w);
}

[numthreads(8, 8, 1)]
void CircleOfConfusionDilate(uint3 dispatchThreadId : SV_DispatchThreadID) {
    float4 tileInfo = _RawCoCTexture[dispatchThreadId.xy];
    int2 startIndex = max((int2)dispatchThreadId.xy - int2(1, 1), int2(0, 0));
    int2 endIndex = min((int2)dispatchThreadId.xy + int2(1, 1), _CameraBufferSize.zw / TILE_RES - int2(1, 1));
    for (int i = startIndex.x; i <= endIndex.x; i++) {
        for (int j = startIndex.y; j <= endIndex.y; j++) {
            float4 tile = LOAD_TEXTURE2D(_RawCoCTexture, int2(i, j));
            DilateTile(tileInfo, tile);
        }
    }
    _DilateCoCTexture[dispatchThreadId.xy] = tileInfo;
}

#pragma kernel CircleOfConfusionGather
// Outpute texture
RWTexture2D<float4> _GatheringTexture;

[numthreads(8, 8, 1)]
void CircleOfConfusionGather(uint3 dispatchThreadId : SV_DispatchThreadID) {
    SampleData centerSample;
    centerSample.color = GetColorSample(dispatchThreadId.xy, 0);
    centerSample.CoC = GetCoCRadius(dispatchThreadId.xy);
    int tileClass = GetTileClass(dispatchThreadId.xy);
    if (ResScale != 1.0 && tileClass != FAST_DEFOCUS_TILE) {
        //early exit: these tiles will be computed at full res in the combine pass
        _GatheringTexture[dispatchThreadId.xy] = centerSample.color;
        return;
    }
    DoFTile tileData;
    LoadTileData(dispatchThreadId.xy, centerSample, NumRings, tileData);
    float3 outColor;
    float outAlpha;
    DoFGathering(dispatchThreadId.xy, tileData, centerSample, outColor, outAlpha);
#if defined(ENABLE_ALPHA)
    ComposeAlpha(outColor, outAlpha, centerSample.color.xyz);
    _GatheringTexture[dispatchThreadId.xy] = float4(outColor, outAlpha);
#endif
    _GatheringTexture[dispatchThreadId.xy] = float4(outColor, 1);
}

#pragma kernel CircleOfConfusionCombine
//texture
TEXTURE2D(_InputGatherTexture);
RWTexture2D<float4> _OutputResult;

[numthreads(8, 8, 1)]
void CircleOfConfusionCombine(uint3 dispatchThreadId : SV_DispatchThreadID) {
    float4 output = 0;
    int tileClass = GetTileClass(dispatchThreadId.xy);
    if (tileClass == SLOW_INFOCUS_TILE) {
        SampleData centerSample;
        centerSample.color = GetColorSample(dispatchThreadId.xy, 0);
        centerSample.CoC = GetCoCRadius(dispatchThreadId.xy);
        DoFTile tileData;
        LoadTileData(dispatchThreadId.xy, centerSample, NumRings, tileData);
        float3 outColor;
        float outAlpha;
        DoFGathering(dispatchThreadId.xy, tileData, centerSample, outColor, outAlpha);
        output.xyz = outColor.xyz;
        output.w = 1;
#if defined(ENABLE_ALPHA)
        ComposeAlpha(outColor, outAlpha, centerSample.color.xyz);
        output.w = outAlpha;
#endif
    }
    else if (tileClass == FAST_DEFOCUS_TILE) {
        float2 uv = min((dispatchThreadId.xy + 0.5) * _CameraBufferSize.xy, 1.0);
        output = SAMPLE_TEXTURE2D_LOD(_InputGatherTexture, sampler_linear_clamp, uv, 0.0);
    }
    else {
        output = GetColorSample(dispatchThreadId.xy, 0);
    }
#if defined(DEBUG_TILE)
    DebugTiles(dispatchThreadId.xy, output.xyz);
#endif
    _OutputResult[dispatchThreadId.xy] = output;
}