#include "../Shaders/DepthOfFieldCommon.hlsl"

#pragma kernel DOFGatherNear MAIN=DOFGatherNear  NEAR
#pragma kernel DOFGatherFar  MAIN=DOFGatherFar FAR

#define GROUP_RES  8u
#define GROUP_SIZE (GROUP_RES * GROUP_RES)
#define SampleCount         _Params1.x
#define ScaledRadius        _Params1.y
#define BarrelClipping      _Params1.z
#define Radius              _Params1.w
#define MaxMips             _Params2.x

#if defined(NEAR)
#define SamplerTap sampler_linear_clamp
#else
#define SamplerTap sampler_trilinear_clamp
#endif

TEXTURE2D(_InputTexture);
//far plane coc
TEXTURE2D(_InputCoCTexture);
//near plane coc
TEXTURE2D(_InputDilatedCoCTexture);
RWTexture2D<float3> _OutputTexture;
RWTexture2D<float> _OutputAlphaTexture;
StructuredBuffer<uint> _BokehKernel;
ConsumeStructuredBuffer<TileData> _TileList;
float4 _TargetScale;

//tile coordinates extracted from _TileList for the thread group
groupshared uint2 gs_tileCoord;

[numthreads(GROUP_SIZE, 1, 1)]
void MAIN(uint groupThreadId : SV_GroupThreadID) {
	//unpack tile pos data from tile list
	if (groupThreadId == 0u) {
		//first thread of the group is responsible for grabbing the tile coordinates
		//.Consume(): Removes a value from the end of the buffer.
		TileData tileData = _TileList.Consume();
		gs_tileCoord = UnpackTileCoord(tileData);
	}
	GroupMemoryBarrierWithGroupSync();
	//compute the actual pixel coordinate we're working
	uint2 dispatchThreadId = gs_tileCoord + uint2(groupThreadId % GROUP_RES, groupThreadId / GROUP_RES);
	//discard out of bounds
	if (any(dispatchThreadId >= (uint2)((_CameraBufferSize.zw - 1) * _TargetScale.y))) {
		return;
	}
	//NOTE HERE: need more accurate uv
	//float2 uv = dispatchThreadId / ((_CameraBufferSize.zw - 1) * _TargetScale.y);
	float2 texelSize = 1 / ((_CameraBufferSize.zw - 1) * _TargetScale.y);
	//in case of compute shader an extra half offset is added to the screenPos to shift the integer position to pixel center
	float2 uv = dispatchThreadId + float2(1, 1);
	uv *= texelSize;
	float2 barrelUV = (uv * 2.0 - 1.0) * BarrelClipping;
	//current pixel CoC
#if defined(NEAR)
	float samp0CoC = SAMPLE_TEXTURE2D_LOD(_InputDilatedCoCTexture, SamplerTap, uv, 0).x;
#else 
	//far
	float samp0CoC = SAMPLE_TEXTURE2D_LOD(_InputCoCTexture, SamplerTap, uv, 0).x;
#endif
	float2 sampDist = texelSize * samp0CoC * Radius;
	//mip level
#if defined(NEAR)
	float mip = 0.0;
#else 
	//far
	float mip = min(MaxMips, (1.0 / (SampleCount - 1.5)) * samp0CoC * ScaledRadius);
#endif
	uint mipCeiled = ceil(mip);
	float texelsToClamp = 1 + (1u << mipCeiled);
	//accumulate data
	float4 acc = 0.0;
	float nearWeightAcc = 0.0;
	float accAplha = 0.0;
	float totalSampleCount = Square(SampleCount);
	[loop]
	for (uint i = 0; i < (uint)totalSampleCount; i++) {
		float2 sampTap = UnpackKernelCoord(_BokehKernel, i);
		//Unity Tech think this barrel clipping / optical vignetting trick isn't correct as they're symetrically shifting samples instead of actually clipping them but due to the low number of samples
		//they can't do a proper implementation so this will do for now and it looks close-enough at low clipping values
		float clipping = 1.0 - abs(dot(sampTap, barrelUV));
		sampTap = sampTap * sampDist * clipping + uv;
		sampTap = min(sampTap, 1.0f - texelSize * texelsToClamp);
		float3 sampColor = SAMPLE_TEXTURE2D_LOD(_InputTexture, SamplerTap, sampTap, mip).xyz;
		float sampCoC = SAMPLE_TEXTURE2D_LOD(_InputCoCTexture, SamplerTap, sampTap, mip).x;
#if defined(NEAR)
		float weight = saturate(1.0 - (sampCoC - samp0CoC));
		acc += float4(sampColor, sampCoC > 0.0) * weight;
		nearWeightAcc += weight;
#else
		//weight & pre-multiply to limit bleeding on the focused area
		float weight = saturate(1.0 - (sampCoC - samp0CoC));
		acc += float4(sampColor.xyz, sampCoC) * weight;
#endif
#if defined(NEAR)
		float alpha = saturate(sqrt((acc.w / totalSampleCount) * PI));
		alpha = smoothstep(0.0, 1.0, alpha);
		_OutputTexture[(uint2)dispatchThreadId] = acc.xyz / (nearWeightAcc + 1e-5);
		_OutputAlphaTexture[(uint2)dispatchThreadId] = alpha;
#else
		_OutputTexture[(uint2)dispatchThreadId] = acc.xyz / (acc.w + 1e-5);
#endif
	}
}
