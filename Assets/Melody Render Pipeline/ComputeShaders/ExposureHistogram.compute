#include "../ShaderLibrary/Common.hlsl"
#include "../Shaders/ExposureHistogram.hlsl"

#pragma kernel EyeHistogram
RWStructuredBuffer<uint> _HistogramBuffer;
Texture2D<float4> _SourceTex;
float4 _ScaleOffsetRes;

//groupshared mark a varible for thread-group-shared memory for cs
groupshared uint gs_histogram[HISTOGRAM_BINS];

[numthreads(HISTOGRAM_THREAD_X, HISTOGRAM_THREAD_Y, 1) ]
void EyeHistogram(uint2 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID) {
    const uint localThreadId = groupThreadId.y * HISTOGRAM_THREAD_X + groupThreadId.x;
    //clear shared memory
    if (localThreadId < HISTOGRAM_BINS) {
        gs_histogram[localThreadId] = 0u;
    }
    //half resolution
    float2 ipos = float2(dispatchThreadId) * 2.0;
    //Blocks execution of all threads in a group until all group shared accesses have been completed and all threads in the group have reached this call.
    GroupMemoryBarrierWithGroupSync();
    //get local group histogram
    if (ipos.x < _ScaleOffsetRes.z && ipos.y < _ScaleOffsetRes.w) {
        uint weight;
        float2 sspos = ipos / _ScaleOffsetRes.zw;
        if (_MeteringMask == 0) {
            weight = 1u;
        }
        //vignette weighting to put more focus on center screen
        else if(_MeteringMask == 1) {
            float2 d = abs(sspos - (0.5).xx);
            float vfactor = saturate(1.0 - dot(d, d));
            vfactor *= vfactor;
            weight = (uint)(64 * vfactor);
        }
        //bilinear donwnsample 2x
        float3 color = _SourceTex.SampleLevel(sampler_linear_clamp, sspos, 0.0).xyz;
        float luminance = color.r * 0.2125 + color.g * 0.7154 + color.b * 0.0721;
        //scale : [-10, 10] * (1.0 / 20.0) offset : 0.5 , range logLumin to [0, 1]
        float logLuminance = GetHistogramFromLuminance(luminance, _ScaleOffsetRes.xy);
        //ensure bin index([0,255]) from EV([0,1])
        uint idx = (uint)(logLuminance * (HISTOGRAM_BINS - 1u));
        //fill this into bin
        InterlockedAdd(gs_histogram[idx], weight);
    }
    GroupMemoryBarrierWithGroupSync();

    //merge everything
    if (localThreadId < HISTOGRAM_BINS) {
        InterlockedAdd(_HistogramBuffer[localThreadId], gs_histogram[localThreadId]);
    }
}

#pragma kernel EyeHistogramClear
[numthreads(HISTOGRAM_THREAD_X, 1, 1)]
void EyeHistogramClear(uint dispatchThreadId : SV_DispatchThreadID) {
    if (dispatchThreadId < HISTOGRAM_BINS)
        //0u : uint 0
        _HistogramBuffer[dispatchThreadId] = 0u;
}
