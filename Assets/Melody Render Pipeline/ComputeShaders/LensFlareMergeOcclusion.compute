#pragma kernel MergeOcclusion

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"

#if defined(DEBUG_DISPLAY)
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Debug.hlsl"
#endif

RW_TEXTURE2D(float, _LensFlareOcclusion);

groupshared float localOcclusion[8][8];

[numthreads(8, 8, 1)]
void MergeOcclusion(uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID) {

    // Row[0] is reserved to store the results
    localOcclusion[groupThreadID.x][groupThreadID.y] = _LensFlareOcclusion[uint2(dispatchThreadId.xy + uint2(0, 1))].x;
    GroupMemoryBarrierWithGroupSync();

    if (groupThreadID.y < 4)
        localOcclusion[groupThreadID.x][groupThreadID.y] = max(localOcclusion[groupThreadID.x][groupThreadID.y], localOcclusion[groupThreadID.x][groupThreadID.y + 4]);
    GroupMemoryBarrierWithGroupSync();

    if (groupThreadID.y < 2)
        localOcclusion[groupThreadID.x][groupThreadID.y] = max(localOcclusion[groupThreadID.x][groupThreadID.y], localOcclusion[groupThreadID.x][groupThreadID.y + 2]);
    GroupMemoryBarrierWithGroupSync();

    if (groupThreadID.y == 0) {
        _LensFlareOcclusion[uint2(dispatchThreadId.x, 0)] = max(localOcclusion[groupThreadID.x][0], localOcclusion[groupThreadID.x][1]);
    }
}
